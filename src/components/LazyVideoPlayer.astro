---
interface Props {
  src: string;
  webmSrc?: string;
  posterSrc?: string;
  width: number;
  height: number;
  class?: string;
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  controls?: boolean;
  playsinline?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
  title?: string;
  id?: string;
}

const {
  src,
  webmSrc,
  posterSrc,
  width,
  height,
  class: className = '',
  autoplay = true,
  muted = true,
  loop = true,
  controls = false,
  playsinline = true,
  preload = 'metadata',
  title,
  id
} = Astro.props;

// Check if we have a WebM version available
const hasWebM = !!webmSrc;

// Check if we have a poster image
const hasPoster = !!posterSrc;
---

<div class={`video-container ${className}`} style={`width: ${width}px; max-width: 100%;`}>
  <video 
    id={id}
    class="lazy-video w-full h-auto"
    width={width}
    height={height}
    poster={hasPoster ? posterSrc : undefined}
    autoplay={autoplay}
    muted={muted}
    loop={loop}
    playsinline={playsinline}
    preload={preload}
    title={title}
    controls={controls}
  >
    {hasWebM && <source data-src={webmSrc} type="video/webm" />}
    <source data-src={src} type="video/mp4" />
    <p>Tu navegador no soporta videos HTML5. Aqu√≠ tienes un <a href={src}>enlace al video</a>.</p>
  </video>
</div>

<style>
  .video-container {
    overflow: hidden;
    position: relative;
    border-radius: 0.5rem;
  }
  
  video {
    display: block;
    object-fit: cover;
    background-color: rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  // LazyLoad videos using Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    const lazyVideos = document.querySelectorAll('.lazy-video');
    
    if ('IntersectionObserver' in window) {
      const videoObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const video = entry.target as HTMLVideoElement;
            const sources = video.querySelectorAll('source');
            
            // Load the real video sources
            sources.forEach(source => {
              const dataSrc = source.getAttribute('data-src');
              if (dataSrc) {
                source.src = dataSrc;
              }
            });
            
            // Load the video
            video.load();
            
            // Optional: Autoplay when in viewport
            if (video.hasAttribute('autoplay')) {
              // Muted autoplay is more likely to work
              video.muted = true;
              video.play().catch(error => {
                console.log("Autoplay prevented:", error);
              });
            }
            
            // Stop observing after loading
            videoObserver.unobserve(video);
          }
        });
      }, {
        rootMargin: '100px 0px',
        threshold: 0.1
      });
      
      // Start observing all videos
      lazyVideos.forEach(video => {
        videoObserver.observe(video);
      });
    } else {
      // Fallback for browsers that don't support Intersection Observer
      lazyVideos.forEach(video => {
        const videoElement = video as HTMLVideoElement;
        const sources = videoElement.querySelectorAll('source');
        
        sources.forEach(source => {
          const dataSrc = source.getAttribute('data-src');
          if (dataSrc) {
            source.src = dataSrc;
          }
        });
        
        videoElement.load();
      });
    }
  });
</script> 