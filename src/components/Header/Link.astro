---
// NavLink.astro
import type { HTMLAttributes } from 'astro/types';
import { ExternalLink } from 'lucide-astro';

// Puedes importar otros iconos específicos que necesites
// import { Mail, User, etc... } from 'lucide-astro';

interface Props extends HTMLAttributes<'a'> {
    href: string;
    text: string;
    iconName?: string; // Nombre del icono como string (lo manejaremos en el cliente)
    isExternal?: boolean;
    variant?: 'default' | 'subtle' | 'button';
    size?: 'sm' | 'md' | 'lg';
    active?: boolean;
}

const { 
    href, 
    text, 
    iconName, 
    isExternal = false,
    variant = 'default',
    size = 'md',
    active = false,
    class: className,
    ...rest 
} = Astro.props;

// Determinar si es una URL externa
const external = isExternal || href.startsWith('http');

// Clases base y variantes
const baseClasses = "group relative font-medium tracking-wide transition-all duration-300 ease-out inline-flex items-center gap-1.5";

const sizeClasses = {
    sm: "text-sm",
    md: "text-base",
    lg: "text-lg"
};

const variantClasses = {
    default: `${sizeClasses[size]} text-gray-800 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400`,
    subtle: `${sizeClasses[size]} text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200`,
    button: `${sizeClasses[size]} px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-sm hover:shadow transition-all`
};

// Clases para el estado activo
const activeClasses = active ? "text-blue-600 dark:text-blue-400 font-semibold" : "";

// Combinar todas las clases
const allClasses = `${baseClasses} ${variantClasses[variant]} ${activeClasses} ${className || ''}`;

// Tamaños de icono según el tamaño del enlace
const iconSizes = {
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6"
};

const externalIconSizes = {
    sm: "w-3 h-3",
    md: "w-3.5 h-3.5",
    lg: "w-4 h-4"
};
---

<a
    href={href}
    class={allClasses}
    {...(external ? { target: "_blank", rel: "noopener noreferrer" } : {})}
    {...rest}
>
    {/* Espacio para icono (si se proporciona) */}
    {iconName && (
        <span id={`icon-${iconName}`} class={`text-blue-500 dark:text-blue-400 ${iconSizes[size]}`}></span>
    )}
    
    {/* Texto del enlace */}
    <span>{text}</span>
    
    {/* Indicador para enlaces externos */}
    {external && (
        <span class="text-gray-400 dark:text-gray-500 text-xs ml-0.5">
            <ExternalLink class={externalIconSizes[size]} />
        </span>
    )}
    
    {/* Línea animada para variante default */}
    {variant === 'default' && (
        <span class="absolute left-0 bottom-0 w-full h-0.5 bg-blue-500 scale-x-0 origin-left transition-transform duration-300 group-hover:scale-x-100"></span>
    )}
</a>

{/* Script para cargar iconos dinámicamente si se proporciona iconName */}
{iconName && (
    <script define:vars={{ iconName }}>
        // Esta función se ejecutará en el cliente para cargar el icono dinámicamente
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Intentamos importar el icono de lucide-astro
                const iconModule = await import('lucide-astro');
                if (iconModule && iconModule[iconName]) {
                    const iconContainer = document.getElementById(`icon-${iconName}`);
                    if (iconContainer) {
                        // Creamos el SVG manualmente basado en el icono
                        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                        svg.setAttribute('width', '24');
                        svg.setAttribute('height', '24');
                        svg.setAttribute('viewBox', '0 0 24 24');
                        svg.setAttribute('fill', 'none');
                        svg.setAttribute('stroke', 'currentColor');
                        svg.setAttribute('stroke-width', '2');
                        svg.setAttribute('stroke-linecap', 'round');
                        svg.setAttribute('stroke-linejoin', 'round');
                        
                        // Añadimos las clases del contenedor al SVG
                        iconContainer.classList.forEach(cls => {
                            svg.classList.add(cls);
                        });
                        
                        // Reemplazamos el contenedor con el SVG
                        iconContainer.parentNode.replaceChild(svg, iconContainer);
                    }
                }
            } catch (error) {
                console.warn(`No se pudo cargar el icono: ${iconName}`, error);
            }
        });
    </script>
)}